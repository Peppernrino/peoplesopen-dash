A lot of these suggestions involve persisting the entire state, but I've found this to be kind of error-prone, as it can be easy to end up persisting some kind of bad state.

I usually do something like: (using redux-thunk here)

    //actions.js

    export function login (credentials) {
      return async (dispatch, getState) => {
        const {
          data: {
            username
          },
          ubus_rpc_session,
          expires
        }  = await ubus.call(null, 'session', 'login', credentials)
    
        if (!ubus_rpc_session) {
          throw new Error("login failed: ubus server did not return session id")
        }
    
        const expiration = moment().add(expires, 'seconds').toISOString()
    
        localStorage.setItem('sessionUsername', username)
        localStorage.setItem('sessionID', ubus_rpc_session)
        localStorage.setItem('sessionExpiration', expiration)
        
        dispatch({
          type: 'logged in',
          sessionUsername: username,
          sessionId: ubus_rpc_session,
          sessionExpiration: expiration,
        })
      }
    }
